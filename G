%!
%G
%ps golfing utilities collection
%
%eg.
%  %!
%  n(G)run  % where n controls which pieces are activated:
%
%  (G)run
%  0(G)run  %activate . $ @ #
%     equivalent to the former (and still valid): (G)run
%
%  1(G)run  %activate . $ @ # and operator abbreviations
%     equivalent to the former:  (G)run A  % load abbreviation dict,
%
%  2(G)run  $ %activate . $ @ # and begin implicit procedure block
%     equivalent to the former:  (G)run D  % begin implicit procs
%
%  3(G)run  $ %activate all of the above
%     equivalent to the former:  (G)run A D % abbreviations and implicit procs
%
%  4(G)run  %activate matrix functions
%     also available at any level by calling `matrices begin` after loading G
%
% implicit procedure blocks require a $ to activate, since it must 
% be delayed until `currentfile` is the program file.
% 
% To reiterate, the base-level is just the binary-coded strings support: 0(G)run
% To add operator abbreviations, add 1 to the argument:                  1(G)run
% To add an implicit procedure block,
%   add 2 to the argument and '$' after:                               2(G)run $
% For both, add 1 and 2 to produce 3:                                  3(G)run $
% For all that, and matrices, add 4 to produce 7:                      7(G)run $
%
%Version 0c
%0a bugfixes. remove output from ABBR construction
%0b add n argument
%0c add iter, foreach, split, ncat, acat and (expanded) matrix library

%%%  Base level

%! 
%operators by code number or number-strings
%by dynamically constructing a binary token in a string

/.{<920>dup 1 4 3 roll put cvx exec}def  % execute operator by table number
/${//. 73 .}def %73== /forall  % execute each char in string as operator number
/@{{32 sub //. exec}73 .}def % ' '->0
/#{{95 add //. exec}73 .}def % ' '->127

%!
% access multidim arrays and deep nested dicts with index array
%
/!{{get}forall}def % comp [indices]  !  element_indices
/*{ % comp [indices] value  *  -
    3 1 roll                % v c a
    dup dup length          % v c a a n
    1 sub 0 exch getinterval % v c a a[0:n-2]
    exch dup length 1 sub get % v c a[0:n-2] a[n-1]
    /! cvx exch              % v c a[0:n-2] ! a[n-1]
    cvlit                   % v c a[0:n-2] ! a_n-1
    3 2 /roll cvx           % v c a[0:n-2] ! a_n-1 3 2 roll
    /put cvx                % v c a[0:n-2] ! a_n-1 3 2 roll put
    6 array astore cvx exec
}def



% start inc fin  iter  proc
/iter {
    [ 4 1 roll
    { % s i f
        2 index lt { pop pop exit } if % s i
        1 index 3 1 roll % s s i
        add              % s s'
        /SELF exch 0 exch put % s
    }aload pop
    ]
    0 1 2 index length 1 sub { % [] i
        2 copy get /SELF eq { % [] i
            1 index 3 copy put % []' i []'
            pop % []' i
        } if % [] i
        pop % []
    } for % []
    cvx % {}
}def
%/i 0 1 9 iter def
%i = i = i =
%{ i == } loop
%[ 0 1 9 iter /something load /something load ] cvx loop



% (string){proc}  foreach  -
%                   (s) proc
%                   (t) proc
%                   ...
% [/A/R/R/A/Y]{proc}  foreach  -                 
%                   [/A] proc
%                   [/R] proc
%                   ...
%                   
% <</dict<def>/key(val)...>>  foreach  -
%                   <</dict<def>>> proc
%                   <</key(val)>> proc
%                   ...
/foreach {
    10 dict begin
        {proc src}{exch def}forall
    /src load type /dicttype ne {
        0 1 /src load length 1 sub {
            /src load exch 1 getinterval
            [
                /proc load /exec load
                currentdict /begin load
            ] cvx end exec
        } for
    }{ % dicttype
        /src load
        [
            ([) cvn cvx 3 1 /roll load
            (>>) cvn cvx
            /proc load /exec load
        ] cvx
        [
            /forall load currentdict /begin load
        ] cvx exec
    } ifelse
    end
} def
%eg.
%(string){==}foreach
%[/A/R/R/A/Y]{==}foreach
%<</dict<def>/key(val)>>{===}foreach %gs extension



%!
%
%(string) (delimiter)  split  [(s)(t)(r)(i)(n)(g)]
/split {              % str del
    [ 3 1 roll        % [ str del
    {                 % [ ... str del
        search {      % [ ... post match pre
            3 1 roll   % [ ... pre post match  %ie. [ ... pre str' del
        }{            % [ ... str
            exit       % [ ... str  %% break-from-loop
        }ifelse
    }loop             % [ ...
    ]                 % [ ... ]
} def
%
%(string of words separated by spaces)( )split ==
%-> [(string) (of) (words) (separated) (by) (spaces)]
%
%(string.of.words.separated.by.dots)(.)split ==
%-> [(string) (of) (words) (separated) (by) (dots)]

% (s1) (s2) (s3) ... (sN) n  ncat  (s1s2s3...sN)
% [a1] [a2] [a3] ... [aN] n  ncat  [a1 a2 a3 ... aN]
/ncat {        % s1 s2 s3 .. sN n                   % first sum the lengths
    dup 1 add  % s1 s2 s3 .. sN n n+1 
    copy       % s1 s2 s3 .. sN n  s1 s2 s3 .. sN n
    0 exch     % s1 s2 s3 .. sN n  s1 s2 s3 .. sN 0 n 
    {   
        exch length add 
    } repeat             % s1 s2 s3 .. sN  n   len  % then allocate string
    2 index type /stringtype eq { string }{ array } ifelse
    exch                 % s1 s2 s3 .. sN str   n   
    0 exch               % s1 s2 s3 .. sN str  off  n
    -1 1 {               % s1 s2 s3 .. sN str  off  n  % copy each string
        2 add -1 roll       % s2 s3 .. sN str  off s1  % bottom to top
        3 copy putinterval  % s2 s3 .. sN str' off s1
        length add          % s2 s3 .. sN str' off+len(s1)
                            % s2 s3 .. sN str' off'
    } for                               % str' off'
    pop  % str'
} def 
%
%(abc) (def) (ghi) (jkl) 4 ncat == %(abcdefghijkl)


% (s1) (s2)  cat  (s1s2)
% [a1] [a2]  cat  [a1 a2]
/cat {
    2 ncat
} def


%array-of-string acat
%array-of-arrays acat
/acat { % [ (s1) (s2) ... (sn) ]  ascat  (s1s2...sn)
    % [...]
    0 1 index { length add } forall % [...] len
    1 index type /stringtype eq { string }{ array } ifelse
    exch 0 exch                     % (...) 0 [...]
    {                               % (...) pos (.)
        3 copy putinterval          % (...) pos (.)
        length add                  % (...) pos
    } forall                        % (...) pos
    pop
} def



%%%  Implicit Proc Block  (arg 1 and 0 ne)

%!
%implicit procedure definitions
%-library- version

%D begins an implicit-procedure block,
%defining the next line as A, the next as B, ...
%according to ascii sequence, until a blank line.
/D{[(A){
    currentfile 99 string readline not { pop exit } if
    dup length 0 eq { exit } if
    cvx
    1 index 1 string copy dup dup 0 get 1 add 0 exch put
}loop>>begin}def


%%%  Abbreviated Names  (arg 2 and 0 ne)

%!
%abbr.ps
% abbreviated system names
% exports (defines) 1 procedure:
%   -  ABBR  dict
% which generates an abbreviation dictionary.
% 
% This allows you to use alphabetic abbreviations for
% standard systemdict names, suxh as:
%
%   a  %= abs 
%   ad %= add 
%   mu %= mul 
%   pr %= print 
%   g  %= ge 
%   f  %= file 
%   etc. Check PLRM 2ed or 3ed, Appendix F Encoded System Names
% Edit for compilation: name ABBR has been shortened to A
%                       and dict is left on dictstack.

/A {
    2 dict begin
    225 -1 0 {  % generate defs in reverse alphabetic (numeric) order
        %dup =only( )=only
        <910> dup 1 4 3 roll put cvx exec
        %dup =only( )=only
        cvx dup =string cvs % op str
        %pstack()= stop
        exch
        dup { currentdict end exch load
        } stopped { pop begin cvlit }{ exch begin exch pop } ifelse
        exch
        %pstack() = %stop
        0
        1 1 3 index length
        %1 sub
        { % opname str 0 i
            3 copy getinterval % opname str 0 i str[0,i]
            %dup =only( )=only
            cvn 4 index def
            pop % opname str 0
        } for
        %()=
        pop pop pop
    } for
    0 1 225 {  % print out the shortest ABBR name for each system name.
        %dup =only( )=only
        <910> dup 1 4 3 roll put cvx exec % opname
        %dup =only( )=only
        cvx dup =string cvs
        exch
        dup { currentdict end exch load
        } stopped { pop begin cvlit }{ exch begin exch pop } ifelse
        exch
        0
        {
            1 1 3 index length 1 sub {
                3 copy getinterval 
                dup cvn load % opname str 0 i str[0,i] loaded
                5 index eq {
                    pop%=only( )=only
                    pop
                    stop
                }{
                    pop pop
                } ifelse
            } for

        } stopped pop
        %()=
        pop pop pop
    } for
    /fore {foreach} def
    /A where pop /A currentdict put %memo
    %currentdict end
} bind def

/matrices 20 dict def
matrices begin
%!
%mat.ps
%Matrix and Vector math routines

/ident { 1 dict begin /n exch def
    [
    1 1 n { % [ i
        [ exch % [ [ i
        1 1 n { % [ [ i j
            1 index eq { 1 }{ 0 } ifelse % [ [ i b
            exch % [ [ b i
        } for % [ [ b+ i
        pop ] % [ [ b+ ]
    } for % [ [b+]+ ]
    ]
end } def

/rotx { 1 dict begin /t exch def
    [ [ 1  0      0         ]
      [ 0  t cos  t sin neg ]
      [ 0  t sin  t cos     ] ]
end } def

/roty { 1 dict begin /t exch def
    [ [ t cos      0  t sin ]
      [ 0          1  0     ]
      [ t sin neg  0  t cos ] ]
end } def

/rotz { 1 dict begin /t exch def
    [ [ t cos  t sin neg  0 ]
      [ t sin  t cos      0 ]
      [ 0      0          1 ] ]
end } def

/rotxy { 1 dict begin /t exch def
    [ [ t cos  t sin neg  0  0 ]
      [ t sin  t cos      0  0 ]
      [ 0      0          1  0 ]
      [ 0      0          0  1 ] ]
end } def

/rotyz { 1 dict begin /t exch def
    [ [ 1  0      0          0 ]
      [ 0  t cos  t sin neg  0 ]
      [ 0  t sin  t cos      0 ]
      [ 0  0      0          1 ] ]
end } def

/rotxz { 1 dict begin /t exch def
    [ [ t cos     0  t sin  0 ]
      [ 0         1  0      0 ]
      [ t sin neg 0  t cos  0 ]
      [ 0         0  0      1 ] ]
end } def

/rotxw { 1 dict begin /t exch def
    [ [ t cos     0  0  t sin ]
      [ 0         1  0  0     ]
      [ 0         0  1  0     ]
      [ t sin neg 0  0  t cos ] ]
end } def

/rotyw { 1 dict begin /t exch def
    [ [ 1  0      0  0         ]
      [ 0  t cos  0  t sin neg ]
      [ 0  0      1  0         ]
      [ 0  t sin  0  t cos     ] ]
end } def

/rotzw { 1 dict begin /t exch def
    [ [ 1  0  0      0         ]
      [ 0  1  0      0         ]
      [ 0  0  t cos  t sin neg ]
      [ 0  0  t sin  t cos     ] ]
end } def

/.error where { pop /signalerror { .error } def } if

/dot { % u v
    2 copy length exch length ne {
        /dot cvx /undefinedresult signalerror } if
    % u v
    0 % u v sum
    0 1 3 index length 1 sub { % u v sum i
        3 index 1 index get exch % u v sum u_i i
        3 index exch get % u v sum u_i v_i
        mul add % u v sum
    } for % u v sum 
    3 1 roll pop pop % sum
} bind def

% [ x1 x2 x3 ] [ y1 y2 y3 ]  cross  [ x2*y3-y2*x3 x3*y1-x1*y3 x1*y2-x2*y1 ]
/cross { % u v
    dup length 3 ne 2 index length 3 ne or {
        /cross cvx /undefinedresult signalerror } if
    % u v
    exch aload pop 4 3 roll aload pop % x1 x2 x3 y1 y2 y3
    [
        5 index 2 index mul % ... [ x2*y3
        3 index 6 index mul sub % ... [ x2*y3-y2*x3
        5 index 5 index mul % ... [ x2*y3-y2*x3 x3*y1
        8 index 4 index mul sub % ... [ x2*y3-y2*x3 x3*y1-x1*y3
        8 index 5 index mul % ... [ x2*y3-y2*x3 x3*y1-x1*y3 x1*y2
        8 index 7 index mul sub % ... [ x2*y3-y2*x3 x3*y1-x1*y3 x1*y2-x2*y1
    ]
    7 1 roll 6 { pop } repeat
} bind def

/transpose { STATICDICT begin
    /A exch def
    /M A length def
    /N A 0 get length def
    [
    0 1 N 1 sub { /n exch def
        [
        0 1 M 1 sub { /m exch def
            A m get n get
        } for
        ]
    } for
    ]
end } dup 0 6 dict put def

/matmul { STATICDICT begin
    /B exch def
    B 0 get type /arraytype ne { /B [B] def } if
    /A exch def
    A 0 get type /arraytype ne { /A [A] def } if
    /Q B length def
    /R B 0 get length def
    /P A length def
    Q A 0 get length ne {
        /A A transpose def
        /P A length def
        Q A 0 get length ne {
            A B end /matmul cvx /undefinedresult signalerror
        } if
    } if

    [
    0 1 P 1 sub { /p exch def % rows of A
        [
        0 1 R 1 sub { /r exch def % cols of B
            0
            0 1 Q 1 sub { /q exch def % terms of sum
                A p get q get
                B q get r get mul
                add
            } for
        } for
        ]
    } for
    ]

end } dup 0 10 dict put def

%u v {operator}  vop  u(op)v
%apply a binary operator to corresponding elements
%in two vectors producing a third vector as result
/vop { 10 dict begin
    /op exch def
    2 copy length exch length ne {
        /op load /vop cvx end /undefinedresult signalerror
    } if

    [ 3 1 roll % [ u v
    0 1 2 index length 1 sub [ % [ ... u v i
        %3 copy exch pop get % u v i u_i
        3 /copy load /exch load /pop load /get load
        %3 copy pop get      % u v i u_i v_i
        3 /copy load /pop load /get load
        %op exch pop         % u v u_i(op)v_i
        /op load /exec load /exch load /pop load
        3 1 /roll load       % u_i(op)v_i u v
    ] cvx end
    for % [ ... u v
    pop pop ]

} def

%length of a vector
/mag { 0 exch { dup mul add } forall } def

% u v {operator}  sop  u(op)v
% where one of u or v is a scalar
% and the other is a vector
/sop {
    3 1 roll
    dup type /arraytype eq { % v array
        exch % v u
        [ exch % v [ u
        2 index length 1 sub { dup } repeat % v [ u^#v
        ] exch % u v
    }{ % v scalar
        [ exch % u [ v
        2 index length 1 sub { dup } repeat % u [ v^#u
    } ifelse
    3 2 roll
    vop
} def
%4 [ 2 3 4 ] { add } sop == 

end

% process options
count 0 ne { % empty stack: do nothing
    dup 4 and 0 ne {
        matrices begin
    } if
    dup 1 and 0 ne { % n&1
        2 and 0 ne { % n&2  1+2
            A
            {D} (?) % "exec" activate selected components with $
        }{           % 1
            A
        } ifelse
    }{
        2 and 0 ne { % 2
            {D} (?) % "exec" activate selected components with $
        } if
    } ifelse
} if
